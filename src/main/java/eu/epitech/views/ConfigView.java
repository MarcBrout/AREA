package eu.epitech.views;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.annotations.DesignRoot;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import eu.epitech.API.ApiUtils;
import eu.epitech.Area;
import eu.epitech.NavigatorUI;
import eu.epitech.Stock;
import eu.epitech.User;
import eu.epitech.action.AAction;
import eu.epitech.reaction.AReaction;
import org.json.JSONObject;

import java.util.ArrayList;

import static eu.epitech.NavigatorUI.dbm;

/**
 * !! DO NOT EDIT THIS FILE !!
 * <p>
 * This class is generated by Vaadin Designer and will be overwritten.
 * <p>
 * Please make a subclass with logic and additional interfaces as needed,
 * e.g class LoginView extends LoginDesign implements View { }
 */
@DesignRoot
@AutoGenerated
@SuppressWarnings("serial")
public class ConfigView extends AbsoluteLayout implements View {
    /*
    *  The three following methods can be deleted , replace with the specific component config passed in parameter
     */
    private ArrayList<TextField> actionConfig = new ArrayList<>();
    private ArrayList<TextField> reactionConfig = new ArrayList<>();
    private Label actionTf = null;
    private Label reactionTf = null;
    private User user;
    private AAction action;
    private AReaction reaction;


    Object configObject = null;
    private int count = 0;

    /*
    *   According to the specific config passed in parameter, set the count attribute
    *   with the number of component correspondent.
     */
    public ConfigView() {
        setSizeFull();
        setWidth("1000px");
        setHeight("1000px");
    }

    /*
    *   In this methods, set the configObject attribute with the specific config passed to this view.
     */
    @Override
    public void enter(ViewChangeListener.ViewChangeEvent event) {

        try {
            Stock stock = (Stock) NavigatorUI.readData(getUI());
            if (stock != null) {
                if (stock.getPrompt() != null) {
                    addComponent(new Label(stock.getPrompt()));
                }
                if (stock.getUser() != null) {
                    this.user = stock.getUser();
                } else {
                    NavigatorUI.putData(getUI(), new Stock(null, null, null, "You are not connected"));
                    getUI().getNavigator().navigateTo("");
                }
                if (stock.getAction() != null) {
                    this.action = stock.getAction();
                } else {
                    NavigatorUI.putData(getUI(), new Stock(this.user, null, null, "You must choose an action first"));
                    getUI().getNavigator().navigateTo("action");
                }
                if (stock.getReaction() != null) {
                    this.reaction = stock.getReaction();
                } else {
                    NavigatorUI.putData(getUI(), new Stock(this.user, this.action, null, "You must choose a reaction first"));
                    getUI().getNavigator().navigateTo("reaction/" + this.action.getName());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (event.getParameters() != null) {
            addComponent(new Label("Configuration of AREA : " + event.getParameters()), "top: 50px; left: 50px;");
        } else {
            NavigatorUI.putData(getUI(), new Stock(this.user, null, null, "You must choose an action first"));
            getUI().getNavigator().navigateTo("action");
        }

        this.actionTf = new Label((this.action.configFields() != null && this.action.configFields().keySet().size() != 0) ? "Config Action" : "Nothing to config");
        this.reactionTf = new Label((this.reaction.configFields() != null && this.reaction.configFields().keySet().size() != 0) ? "Config Reaction" : "Nothing to config");

        if (this.action.configFields() != null) {
            for (String field : this.action.configFields().keySet()) {
                actionConfig.add(new TextField(field));
            }
        }
        if (this.reaction.getRequiredConfigFields() != null){
            for (String field : this.reaction.configFields().keySet()) {
                reactionConfig.add(new TextField(field));
            }
        }

        addComponent(this.actionTf, "top: 150px; left: 50px");
        addComponent(this.reactionTf, "top: 150px; left: 400px");

        int actionHeight = 250;
        for (TextField txt : this.actionConfig) {
            addComponent(txt, "top: " + Integer.toString(actionHeight) + "px; left: 50px;");
            actionHeight += 100;
        }
        int reactionHeight = 250;
        for (TextField txt : this.reactionConfig) {
            addComponent(txt, "top: " + Integer.toString(reactionHeight) + "px; left: 400px;");
            reactionHeight += 100;
        }
        Button b = validateButton();
        if (this.action.getApi() == ApiUtils.Name.TWITTER || this.reaction.getApi() == ApiUtils.Name.TWITTER)
            ConnectionButtons.addTwitterButtons(user).extend(b);
        addComponent(b, "top: " + Integer.toString((actionHeight > reactionHeight) ? actionHeight : reactionHeight) + "px; left: 200px;");
    }

    private Button validateButton() {
        return new Button("Validate", (Button.ClickListener) clickEvent -> {
            JSONObject confAction = null;
            JSONObject confReaction = null;
            for (TextField tf : actionConfig) {
                if (tf.getValue().equals("")) {
                    confAction = null;
                } else {
                    if (confAction == null)
                        confAction = new JSONObject();
                    confAction.put(tf.getCaption(), tf.getValue());
                }
            }
            for (TextField tf : reactionConfig) {
                if (tf.getValue().equals("")) {
                    confReaction = null;
                } else {
                    if (confReaction == null)
                        confReaction = new JSONObject();
                    confReaction.put(tf.getCaption(), tf.getValue());
                }
            }
            if ((action.getRequiredConfigFields() == null || action.getRequiredConfigFields().size() == 0 ||
                    (action.getRequiredConfigFields() != null && action.getRequiredConfigFields().size() != 0 && confAction != null)) &&
                    reaction.getRequiredConfigFields() == null || reaction.getRequiredConfigFields().size() == 0 ||
                    (reaction.getRequiredConfigFields() != null && reaction.getRequiredConfigFields().size() != 0 && confReaction != null)) {

                action.setConfig(confAction);
                reaction.setConfig(confReaction);
                Area area = new Area(action, reaction, user);
                area.addToDatabase(dbm);
                NavigatorUI.putData(getUI(), new Stock(user, null, null, "AREA validated and set."));
                getUI().getNavigator().navigateTo("action");
            }
        });
    }
}
